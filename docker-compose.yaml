version: "3.8"
#docker compose up -d bot
#docker compose logs -f bot
services:
  bot:
    build: .
    env_file: .env
    environment:
      DB_HOST: postgres
    dns: 8.8.8.8
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - /var/lib/todolist/bot
    command:
      - python3
      - manage.py
      - runbot

  frontend:
    image: sermalenk/skypro-front:lesson-38
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started

  api:
    build: .
    env_file: .env
    environment:
      DB_HOST: postgres
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  migrations:
    build: .
    env_file: .env
    environment:
      DB_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: python manage.py migrate

  postgres:
    image: postgres:15.1-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data



volumes:
  pg_data:

